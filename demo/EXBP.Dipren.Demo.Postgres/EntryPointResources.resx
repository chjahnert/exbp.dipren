<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DescriptionArgumentJobName" xml:space="preserve">
    <value>The name of the processing job.</value>
  </data>
  <data name="DescriptionCommandDeploy" xml:space="preserve">
    <value>Creates the required database structure and populates the source database.</value>
  </data>
  <data name="DescriptionCommandMonitor" xml:space="preserve">
    <value>Monitors a distributed processing job.</value>
  </data>
  <data name="DescriptionCommandProcess" xml:space="preserve">
    <value>Runs a distributed processing job.</value>
  </data>
  <data name="DescriptionCommandRemove" xml:space="preserve">
    <value>Removes all database objects.</value>
  </data>
  <data name="DescriptionCommandRoot" xml:space="preserve">
    <value>Dipren Demo Application using Postgres

This demo application demonstrates how to process a large set of entries using Dipren. It requires a Postgres SQL Server up and running with an empty database created.

Start by initializing the database using the 'deploy' command. Executing the command will create the required database objects and generate the dataset to be processed. The size of the dataset can be configured. Once the dataset is generated, run the 'schedule' command to schedule the job for processing. To process the entire dataset, run the 'process' command. This command will start processing the dataset on 3 threads. The number of threads can be configured, too. You can start several instances of the demo application with the same parameters to increase the number of processing nodes.

For more information visit https://github.com/chjahnert/exbp.dipren/wiki</value>
  </data>
  <data name="DescriptionCommandSchedule" xml:space="preserve">
    <value>Schedules a distributed processing processing job.</value>
  </data>
  <data name="DescriptionOptionDatabase" xml:space="preserve">
    <value>The connection string to the Postgres SQL database to use.</value>
  </data>
  <data name="DescriptionOptionDeployDatasetSize" xml:space="preserve">
    <value>The number of rows to generate in the source database.</value>
  </data>
  <data name="DescriptionOptionProcessBatchSize" xml:space="preserve">
    <value>The number of items to process per batch.</value>
  </data>
  <data name="DescriptionOptionProcessBatchTimeout" xml:space="preserve">
    <value>The timeout for processing a single batch (ms).</value>
  </data>
  <data name="DescriptionOptionProcessClockDrift" xml:space="preserve">
    <value>The maximum time difference between processing nodes (ms).</value>
  </data>
  <data name="DescriptionOptionProcessThreads" xml:space="preserve">
    <value>The number of processing threads to start.</value>
  </data>
  <data name="DescriptionOptionReverse" xml:space="preserve">
    <value>Process the key range in descending order.</value>
  </data>
  <data name="MessageIntroduction" xml:space="preserve">
    <value>This is a demo application that demonstrates how to use Dipren.
For more details use arguent --help.</value>
  </data>
</root>